<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yet another tech blog</title><link>https://cyrillesondag.github.io/</link><description>Recent content on Yet another tech blog</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><copyright>© {year}</copyright><lastBuildDate>Sun, 17 Oct 2021 10:34:56 +0200</lastBuildDate><atom:link href="https://cyrillesondag.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Systemd - partie 1</title><link>https://cyrillesondag.github.io/blog/systemd-part-one/</link><pubDate>Sun, 17 Oct 2021 10:34:56 +0200</pubDate><guid>https://cyrillesondag.github.io/blog/systemd-part-one/</guid><description>Jean-Francois Millet - Les Glaneuses (1857), huile sur toile, 83,5 × 110 cm, Paris, musée d&amp;rsquo;Orsay.
Je vais m&amp;rsquo;attacher dans cette partie introductive à expliciter la séquence de boot sous Linux pour m&amp;rsquo;arrêter au lancement du processus d&amp;rsquo;init. Puis faire la distinction entre systemd et SysV init sans rentrer dans les détails d&amp;rsquo;implémentation, puis revenir rapidement sur le débat autour de l&amp;rsquo;adoption du systemd.
Les détails techniques et l&amp;rsquo;utilisation de systemd en lui-même feront les sujets d&amp;rsquo;articles suivants.</description></item><item><title>Présentation Linux Memory</title><link>https://cyrillesondag.github.io/blog/presentation-linux-menory/</link><pubDate>Sat, 16 Oct 2021 20:42:39 +0200</pubDate><guid>https://cyrillesondag.github.io/blog/presentation-linux-menory/</guid><description>Les slides de ma présentation sur la gestion de la mémoire sous Linux.
virtual memory memory management TLB &amp;hellip;</description></item><item><title>Débuter avec RxJava</title><link>https://cyrillesondag.github.io/blog/starting-rxjava/</link><pubDate>Tue, 04 Dec 2012 10:34:56 +0200</pubDate><guid>https://cyrillesondag.github.io/blog/starting-rxjava/</guid><description>Pourquoi utiliser Rx ? Le Framework Rx prend une importance croissante dans le développement d&amp;rsquo;applications mobiles. Il apporte une très grande flexibilité dans la gestion des appels asynchrones et permet de répondre facilement aux problèmes de synchronisation des événements (le fameux Callback Hell).
Néanmoins l&amp;rsquo;apprentissage peut être assez déroutant au départ si l&amp;rsquo;on ne comprend pas la philosophie sur laquelle est basée ce Framework. Une fois cette étape achevé, il devient très simple de répondre à des problématiques d’enchaînement d’événements complexes.</description></item></channel></rss>